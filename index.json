
[{"content":"","date":"2025/08/13","externalUrl":null,"permalink":"/","section":"Cory's blog","summary":"","title":"Cory's blog","type":"page"},{"content":"","date":"2025/08/13","externalUrl":null,"permalink":"/tags/ops/","section":"Tags","summary":"","title":"Ops","type":"tags"},{"content":"","date":"2025/08/13","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025/08/13","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025/08/13","externalUrl":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":" 起因 # 客户在winserver2019机器上执行http.client.HTTPSConnection(\u0026quot;xingchen-api.xf-yun.com\u0026quot;, timeout=120) 命令时报错 错误为\n[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1000) 该报错表示SSL上下文无法验证服务器的SSL证书颁发机构,根本原因是找不到本地证书\n一线解决方案 # 一线执行pip install --upgrade certifi试图修复错误，失败 禁用证书验证测试连通性,正常\nimport ssl http.client.HTTPSConnection(\u0026#34;xingchen-api.xf-yun.com\u0026#34;, timeout=120, context=ssl._create_unverified_context()) 最终解决方案 # 通过pip install pip_system_certs安装解决\n","date":"2025/08/13","externalUrl":null,"permalink":"/posts/windows-ssl-error/","section":"Posts","summary":"","title":"一例Python发起HTTPS请求出现SSL报错","type":"posts"},{"content":"","date":"2025/08/11","externalUrl":null,"permalink":"/tags/build/","section":"Tags","summary":"","title":"Build","type":"tags"},{"content":"","date":"2025/08/11","externalUrl":null,"permalink":"/tags/container/","section":"Tags","summary":"","title":"Container","type":"tags"},{"content":" Docker带IB和GPU安装 # 参考 # 流程 # 安装docker #!/bin/bash sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;${UBUNTU_CODENAME:-$VERSION_CODENAME}\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update sudo apt update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker version 配置NVIDIA_CONTAINER_TOOLKIT #!/bin/bash distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \u0026amp;\u0026amp; \\ curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \u0026amp;\u0026amp; \\ curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | sed \u0026#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g\u0026#39; | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list sudo apt-get update export NVIDIA_CONTAINER_TOOLKIT_VERSION=1.17.8-1 sudo apt-get install -y \\ nvidia-container-toolkit=${NVIDIA_CONTAINER_TOOLKIT_VERSION} \\ nvidia-container-toolkit-base=${NVIDIA_CONTAINER_TOOLKIT_VERSION} \\ libnvidia-container-tools=${NVIDIA_CONTAINER_TOOLKIT_VERSION} \\ libnvidia-container1=${NVIDIA_CONTAINER_TOOLKIT_VERSION} sudo nvidia-ctk runtime configure --runtime=docker sudo systemctl restart docker 主机sshd配置\n修改 /etc/ssh/sshd_config以允许远程主机通过ssh隧道向容器内提供服务 GatewayPorts clientspecified docker网络配置\n配置 /etc/systemd/system/docker.service.d/http-proxy.conf 以允许docker通过代理服务拉取镜像 [Service] Environment=\u0026#34;HTTP_PROXY=http://127.0.0.1:7897\u0026#34; Environment=\u0026#34;HTTPS_PROXY=http://127.0.0.1:7897\u0026#34; Environment=\u0026#34;NO_PROXY=localhost,127.0.0.1\u0026#34; 配置 ~/.docker/config.json 以允许容器内使用宿主机的代理服务,其中MASTER_ADDR应设置为 ip a|grep bond0|grep 24|awk '{print $2}'|awk -F/ '{print $1}'获取的值\n{ \u0026#34;proxies\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;httpProxy\u0026#34;: \u0026#34;http://${MASTER_ADDR}:7897\u0026#34;, \u0026#34;httpsProxy\u0026#34;: \u0026#34;http://${MASTER_ADDR}$:7897\u0026#34;, \u0026#34;noProxy\u0026#34;: \u0026#34;localhost,127.0.0.1/8,10.20.200.1/8\u0026#34; } } } sudo mkdir -p /etc/systemd/system/docker.service.d cp http-proxy.conf /etc/systemd/system/docker.service.d mkdir -p /root/.docker cp config.json /root/.docker/ sudo systemctl daemon-reload sudo systemctl restart docker docker info|grep -i proxy MTU配置\n还是修改 ~/.docker/config.json 配置合理的MTU以便Docker通过宿主机联接互联网 { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://docker.m.daocloud.io\u0026#34;], \u0026#34;mtu\u0026#34;:1442, \u0026#34;runtimes\u0026#34;: { \u0026#34;nvidia\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;nvidia-container-runtime\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [] } } } overlay网络创建 头结点配置 # export MASTER_ADDR=\u0026#34;10.20.20.11\u0026#34; docker swarm init --advertise-addr $MASTER_ADDR # docker swarm join --token SWMTKN-1-4f4899ad7l558ida8qet6jgswuyqa3nli89udora7warw302qh-6gu0scglazcoy11p9bqumxnor 10.20.20.11:2377 docker network create -d overlay --subnet=\u0026#34;10.20.200.0/24\u0026#34; --gateway=\u0026#34;10.20.200.1\u0026#34; --attachable overlay01 # nktlph09p0f8e9fcdqotw15d8 从节点配置 # docker swarm join --token SWMTKN-1-4f4899ad7l558ida8qet6jgswuyqa3nli89udora7warw302qh-6gu0scglazcoy11p9bqumxnor 10.20.20.11:2377 配置NGC密钥 登录(NGC)[https://org.ngc.nvidia.com/]\n在setup\u0026gt;API Keys中点击 Generate Personal Key获取密钥 docker login nvcr.io Username:$oauthtoken Password:XXX 运行NCCL-tests Dockerfile # ARG NGC_VERSION=23.04-py3 FROM nvcr.io/nvidia/pytorch:${NGC_VERSION} AS base ENV DEBIAN_FRONTEND=noninteractive RUN mkdir /run/sshd \u0026amp;\u0026amp; apt-get update \u0026amp;\u0026amp; apt-get install -y \\ openssh-server \\ openssh-client \\ vim \\ wget \\ git RUN git clone https://github.com/NVIDIA/nccl-tests.git /nccl-tests \u0026amp;\u0026amp; cd /nccl-tests \u0026amp;\u0026amp; make MPI=1 MPI_HOME=/opt/hpcx/ompi/ -j ENV TZ=Asia/Shanghai ENV NCCL_IB_RETRY_CNT=\u0026#34;13\u0026#34; NCCL_IB_TIMEOUT=\u0026#34;22\u0026#34; \\ NCCL_DEBUG=\u0026#34;WARN\u0026#34; \\ NCCL_IB_HCA=\u0026#34;mlx5_0:1,mlx5_1:1,mlx5_4:1,mlx5_5:1\u0026#34; \\ NCCL_IB_P2P_DISABLE=\u0026#34;0\u0026#34; \\ NCCL_IB_DISABLE=\u0026#34;0\u0026#34; RUN apt install -y net-tools sudo RUN dpkg-statoverride --remove /usr/lib/dbus-1.0/dbus-daemon-launch-helper || true 制作本地docker文件 # docker pull nvcr.io/nvidia/pytorch:23.04-py3 docker pull nvcr.io/nvidia/pytorch:25.06-py3 docker save -o pytorch.tar nvcr.io/nvidia/pytorch:23.04-py3 docker build -t nccl-test:v2025.08.12 . docker save -o /data/dockerimage/nccl-test_2025.08.12.tar nccl-test:v2025.08.12 1号节点执行 # docker run -itd --runtime=nvidia --gpus all --device=/dev/infiniband --shm-size 1024G --ulimit memlock=-1 --network overlay01 \\ --ip 10.20.200.100 \\ -v /data:/data -v /root:/root -v /root/.ssh/:/root/.ssh/ c81e26d88f9b EX_ID=`docker ps --latest -q` 其余节点执行 # docker load -i /data/dockerimage/pytorch_23.04-py3.tar docker load -i /data/dockerimage/nccl-test_2025.08.12.tar docker run -itd --runtime=nvidia --gpus all --device=/dev/infiniband --shm-size 1024G --ulimit memlock=-1 --network overlay01 \\ --ip 10.20.200.$nodeid \\ -v /data:/data -v /root:/root -v /root/.ssh/:/root/.ssh/ c81e26d88f9b EX_ID=`docker ps --latest -q` docker exec -it ${EX_ID} bash /usr/sbin/sshd 节点互通测试 # ssh -T 10.20.200.101 启动nccl-tests # EX_ID=`docker ps --latest -q` docker exec -it ${EX_ID} bash cd cd /data/apps/nccl-tests-2.16.7_ubuntu2002/ mpirun --allow-run-as-root \\ -np 32 -H 10.20.200.100:8,10.20.200.101:8,10.20.200.102:8,10.20.200.103:8 \\ ./build/all_reduce_perf -g 1 -b 512M -e 16G -f 2 2\u0026gt;\u0026amp;1 |tee test4node.log ","date":"2025/08/11","externalUrl":null,"permalink":"/posts/docker_gpu_ib/","section":"Posts","summary":"","title":"带IB和GPU的docker安装","type":"posts"},{"content":"","date":"2025/08/10","externalUrl":null,"permalink":"/tags/debug/","section":"Tags","summary":"","title":"Debug","type":"tags"},{"content":"","date":"2025/08/10","externalUrl":null,"permalink":"/tags/torch/","section":"Tags","summary":"","title":"Torch","type":"tags"},{"content":" 现象 # 提交作业，输出3个循环后不再打印日志\nnvidia-smi和普罗米修斯报告作业的gpu利用率为100%\n集群使用的GPU为Tesla-V100\n排查 # print()发现卡死位置为x_prime = torch.linalg.solve(A_reg, b_prime)\n结合现象,考虑是矩阵求解时卡死 对输入变量进行检查\nprint(\u0026#34;check A_reg: {}\u0026#34;.format(torch.isnan(A_reg).any())) print(\u0026#34;check b_prime: {}\u0026#34;.format(torch.isnan(b_prime).any())) ","date":"2025/08/10","externalUrl":null,"permalink":"/posts/pytorch-deadlock/","section":"Posts","summary":"","title":"一例pytorch死锁排查","type":"posts"},{"content":"","date":"2025/08/09","externalUrl":null,"permalink":"/tags/lammps/","section":"Tags","summary":"","title":"Lammps","type":"tags"},{"content":" numpy必须使用1.x cmake 对于nvtx的支持存在问题,必须手动指定 find_path(nvtx3_dir NAMES nvtx3 PATHS \u0026#34;/data/apps/cuda/12.6/include\u0026#34;) 使用conda安装mpi时,默认使用了mpich,mpich不提供OMPI_系列的环境变量,因此需要手动指定openmpi作为mpi后端 项目地址:pair_nequip_allegro 建议使用nvcc_warpper作为编译前端,路径在${LAMMPS_SRC}/lib/kokkos/bin/nvcc_wrapper default_arch=\u0026#34;sm_89\u0026#34; host_compiler=\u0026#39;${CONDA_PREFIX}/bin/x86_64-conda-linux-gnu-g++\u0026#39; ","date":"2025/08/09","externalUrl":null,"permalink":"/posts/lammps_build_nequip/","section":"Posts","summary":"","title":"Lammps build with nequip","type":"posts"},{"content":"","date":"2025/08/09","externalUrl":null,"permalink":"/tags/x86/","section":"Tags","summary":"","title":"X86","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/topics/","section":"Topics","summary":"","title":"Topics","type":"topics"}]